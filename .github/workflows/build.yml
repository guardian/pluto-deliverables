name: Buildntest

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    services:
      postgres:
        image: postgres:9.6-alpine
        env:
          POSTGRES_DB: pluto-deliverables
          POSTGRES_USER: pluto-deliverables
          POSTGRES_PASSWORD: pluto-deliverables
          POSTGRES_HOST_AUTH_METHOD: trust
          DB_HOST: "postgres"
        ports:
          - 5432:5432
          # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: "12.18"
      - name: Make GITHUB_RUN_NUMBER env var available outside of shells
        working-directory: ${{env.GITHUB_WORKSPACE}}
        shell: bash
        run: |
          echo GITHUB_RUN_NUMBER=$(( GITHUB_RUN_NUMBER + 938 )) >> $GITHUB_ENV
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GHA-build

      - name: ECR Login
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Prepare test outputs location
        run: if [ -d "junit-tests" ]; then mkdir junit-tests; fi

      - name: Add .npmrc
        run: "echo -e \"\n//npm.pkg.github.com/:_authToken=${{secrets.GITHUB_TOKEN}}\" >> .npmrc"
        working-directory: frontend

      - run: yarn install --frozen-lockfile
        working-directory: frontend
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Build and test frontend
        working-directory: frontend
        env:
          JEST_JUNIT_OUTPUT_DIR: ../junit-tests
          JEST_JUNIT_TITLE: Frontend tests
        run: |
          yarn lint
          yarn test
          yarn build:prod

      - name: psycopg2 prerequisites
        run: sudo apt-get install build-essential libffi-dev libpq-dev git -y
      - name: Initialize submodule
        run: |
          git submodule init
          git submodule update
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r gnmvidispine/requirements.txt
      
      - name: Setup
        run: |
          cd gnmvidispine && CIRCLE_BUILD_NUM=$GITHUB_RUN_NUMBER python ./setup.py install && cd ..
          sleep 5
      - name: Run tests
        run: python ./manage.py test gnm_deliverables.tests
