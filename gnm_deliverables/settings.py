"""
Django settings for deliverables project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ouu5awo+ny)_4@x2e2v6cm5aur4rdli(0e#tu0hvekurbbf)*o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
if "DEPLOYMENT_HOST" in os.environ:
    ALLOWED_HOSTS.append(os.environ["DEPLOYMENT_HOST"])
if "CALLBACK_HOST" in os.environ:
    ALLOWED_HOSTS.append(os.environ["CALLBACK_HOST"])

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'gnm_deliverables',
    'django_nose',
    'rest_framework'
]

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'
NOSE_ARGS = [
    "--with-coverage",
    "--cover-package=gnm_deliverables"
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'gnm_deliverables.deployment_route_redirector.DeploymentRouteRedirector'
]

ROOT_URLCONF = 'gnm_deliverables.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get("DB_NAME","pluto-deliverables"),
        'USER': os.environ.get("DB_USER","pluto-deliverables"),
        'PASSWORD': os.environ.get("DB_PASSWD","pluto-deliverables"),
        'HOST': os.environ.get("DB_HOST", 'localhost'),
        'PORT': os.environ.get("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

### Vidispine configuration. These should be the locations that the _server portion_ can access VS, not the browser.
VIDISPINE_URL=os.environ.get("VIDISPINE_URL","http://vidispine.local:80")
VIDISPINE_USER=os.environ.get("VIDISPINE_USER","admin")
VIDISPINE_PASSWORD=os.environ.get("VIDISPINE_PASSWORD","admin")


### DEPLOYMENT_ROOT is the place we are deploted, i.e. the full base URL that the client's browser will connect to us at.
DEPLOYMENT_ROOT = os.environ.get("DEPLOYMENT_ROOT", "http://localhost:9000")
### VS_CALLBACK_ROOT is the place that Vidispine should expect to find us for notifications.  In normal deployment, this
#### is _in-cluster_ so should be an http:// link to our k8s Service and NOT the external-facing https:// one.
VS_CALLBACK_ROOT = os.environ.get("CALLBACK_ROOT", "http://localhost:9000")

### Message queue configuration. These should be the locations that the _server portion_ can access Rabbitmq
RABBITMQ_HOST = os.environ.get("RABBITMQ_HOST", "localhost")
RABBITMQ_PORT = int(os.environ.get("RABBITMQ_PORT", "5672"))
RABBITMQ_VHOST = os.environ.get("RABBITMQ_VHOST", "prexit")
RABBITMQ_EXCHANGE = 'pluto-deliverables'
RABBITMQ_USER = os.environ.get("RABBITMQ_USER","pluto-ng")
RABBITMQ_PASSWD = os.environ.get("RABBITMQ_PASSWD","")

# Transcode presets to use.  The first value is a regex to match against the MIME type, the second is the name of the VS preset
TRANSCODE_PRESETS = {
    r'^video/': "lowres",
    r'^audio/': "lowaudio",
    r'^image/': "lowimage",
    r'^application/x-mxf': "lowres",
    r'^application/x-material-exchange-format': "lowres"
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'normal': {
            'format': "{asctime} {name}|{funcName} [{levelname}] {message}",
            'style': "{"
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'normal',
        },
    },
    'pika': {
        'handlers': ['console'],
        'level': 'ERROR',
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}